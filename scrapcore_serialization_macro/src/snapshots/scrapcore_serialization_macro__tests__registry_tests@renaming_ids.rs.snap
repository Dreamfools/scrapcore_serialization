---
source: scrapcore_serialization_macro/src/tests.rs
expression: check_registry(path)
input_file: scrapcore_serialization_macro/src/test_cases/registry/renaming_ids.rs
---
#[registry(error = ModelError)]
pub struct Model {
    #[model(collection, id_name = ATestId)]
    test: A,
    #[model(collection, id_name = SomethingElse)]
    test2: B,
    #[model(collection)]
    test3: C1,
}
#[derive(Debug)]
pub enum ModelItem {
    Test(A),
    Test2(B),
    Test3(C1),
}
pub type ATestId = scrapcore_serialization::registry::CollectionItemId<A>;
pub type SomethingElse = scrapcore_serialization::registry::CollectionItemId<B>;
pub type Test3Id = scrapcore_serialization::registry::CollectionItemId<C1>;
#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
#[derive(schemars::JsonSchema)]
#[serde(tag = "type")]
#[serde(rename_all = "PascalCase")]
#[serde(rename = "ModelItem")]
pub enum ModelItemSerialized {
    Test(
        scrapcore_serialization::registry::entry::RegistryEntrySerialized<
            <A as scrapcore_serialization::serialization::SerializationFallback>::Fallback,
        >,
    ),
    Test2(
        scrapcore_serialization::registry::entry::RegistryEntrySerialized<
            <B as scrapcore_serialization::serialization::SerializationFallback>::Fallback,
        >,
    ),
    Test3(
        scrapcore_serialization::registry::entry::RegistryEntrySerialized<
            <C1 as scrapcore_serialization::serialization::SerializationFallback>::Fallback,
        >,
    ),
}
#[derive(Debug, Copy, Clone, Eq, PartialEq, serde::Serialize, serde::Deserialize)]
#[derive(schemars::JsonSchema)]
#[serde(rename_all = "PascalCase")]
pub enum ModelItemKind {
    Test,
    Test2,
    Test3,
}
#[automatically_derived]
impl std::fmt::Display for ModelItemKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f, "{}", match self { ModelItemKind::Test => stringify!(Test),
            ModelItemKind::Test2 => stringify!(Test2), ModelItemKind::Test3 =>
            stringify!(Test3), }
        )
    }
}
#[derive(Debug, Copy, Clone, Eq, PartialEq, serde::Serialize, serde::Deserialize)]
#[derive(schemars::JsonSchema)]
#[serde(rename_all = "PascalCase")]
pub enum ModelAssetKind {}
#[automatically_derived]
impl std::fmt::Display for ModelAssetKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        unreachable!()
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::kind::ItemKindProvider<A> for ModelRegistry {
    fn kind() -> Self::ItemKind {
        ModelItemKind::Test
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::kind::ItemKindProvider<B> for ModelRegistry {
    fn kind() -> Self::ItemKind {
        ModelItemKind::Test2
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::kind::ItemKindProvider<C1> for ModelRegistry {
    fn kind() -> Self::ItemKind {
        ModelItemKind::Test3
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::kind::ItemKindProvider<A>
for PartialModelRegistry {
    fn kind() -> Self::ItemKind {
        ModelItemKind::Test
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::kind::ItemKindProvider<B>
for PartialModelRegistry {
    fn kind() -> Self::ItemKind {
        ModelItemKind::Test2
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::kind::ItemKindProvider<C1>
for PartialModelRegistry {
    fn kind() -> Self::ItemKind {
        ModelItemKind::Test3
    }
}
#[derive(Debug)]
pub struct ModelRegistry {
    test: scrapcore_serialization::registry::ItemCollection<A>,
    test2: scrapcore_serialization::registry::ItemCollection<B>,
    test3: scrapcore_serialization::registry::ItemCollection<C1>,
}
#[derive(Debug, Default)]
pub struct PartialModelRegistry {
    poisoned__: bool,
    test: scrapcore_serialization::registry::PartialItemCollection<A>,
    test2: scrapcore_serialization::registry::PartialItemCollection<B>,
    test3: scrapcore_serialization::registry::PartialItemCollection<C1>,
}
#[automatically_derived]
impl scrapcore_serialization::registry::CollectionHolder<A> for ModelRegistry {
    fn get_collection(&self) -> &scrapcore_serialization::registry::ItemCollection<A> {
        &self.test
    }
    fn get_collection_mut(
        &mut self,
    ) -> &mut scrapcore_serialization::registry::ItemCollection<A> {
        &mut self.test
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::PartialCollectionHolder<A>
for PartialModelRegistry {
    fn get_collection(
        &mut self,
    ) -> &mut scrapcore_serialization::registry::PartialItemCollection<A> {
        &mut self.test
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::CollectionHolder<B> for ModelRegistry {
    fn get_collection(&self) -> &scrapcore_serialization::registry::ItemCollection<B> {
        &self.test2
    }
    fn get_collection_mut(
        &mut self,
    ) -> &mut scrapcore_serialization::registry::ItemCollection<B> {
        &mut self.test2
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::PartialCollectionHolder<B>
for PartialModelRegistry {
    fn get_collection(
        &mut self,
    ) -> &mut scrapcore_serialization::registry::PartialItemCollection<B> {
        &mut self.test2
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::CollectionHolder<C1> for ModelRegistry {
    fn get_collection(&self) -> &scrapcore_serialization::registry::ItemCollection<C1> {
        &self.test3
    }
    fn get_collection_mut(
        &mut self,
    ) -> &mut scrapcore_serialization::registry::ItemCollection<C1> {
        &mut self.test3
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::PartialCollectionHolder<C1>
for PartialModelRegistry {
    fn get_collection(
        &mut self,
    ) -> &mut scrapcore_serialization::registry::PartialItemCollection<C1> {
        &mut self.test3
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::SerializationRegistry for ModelRegistry {
    type ItemKind = ModelItemKind;
    type AssetKind = ModelAssetKind;
    type Error = ModelError;
}
#[automatically_derived]
impl scrapcore_serialization::registry::SerializationRegistry for PartialModelRegistry {
    type ItemKind = ModelItemKind;
    type AssetKind = ModelAssetKind;
    type Error = ModelError;
}
impl scrapcore_serialization::registry::PartialRegistry for PartialModelRegistry {
    fn poison(&mut self) {
        self.poisoned__ = true;
    }
    fn is_poisoned(&self) -> bool {
        self.poisoned__
    }
}
impl PartialModelRegistry {
    pub fn into_registry(
        self,
    ) -> Result<
        ModelRegistry,
        scrapcore_serialization::serialization::error::DeserializationError<
            PartialModelRegistry,
        >,
    > {
        let mut registry = self;
        scrapcore_serialization::registry::finalize::process_raw_collection::<
            A,
            PartialModelRegistry,
        >(&mut registry)?;
        scrapcore_serialization::registry::finalize::process_raw_collection::<
            B,
            PartialModelRegistry,
        >(&mut registry)?;
        scrapcore_serialization::registry::finalize::process_raw_collection::<
            C1,
            PartialModelRegistry,
        >(&mut registry)?;
        let test = scrapcore_serialization::registry::finalize::convert_partial_collection::<
            A,
            PartialModelRegistry,
        >(registry.test)?;
        let test2 = scrapcore_serialization::registry::finalize::convert_partial_collection::<
            B,
            PartialModelRegistry,
        >(registry.test2)?;
        let test3 = scrapcore_serialization::registry::finalize::convert_partial_collection::<
            C1,
            PartialModelRegistry,
        >(registry.test3)?;
        Ok(ModelRegistry {
            test,
            test2,
            test3,
        })
    }
}
impl PartialModelRegistry {
    pub fn insert(
        &mut self,
        path: impl Into<
            scrapcore_serialization::registry::path_identifier::PathIdentifier,
        >,
        item: ModelItemSerialized,
    ) -> Result<
        (),
        scrapcore_serialization::serialization::error::DeserializationError<
            PartialModelRegistry,
        >,
    > {
        let registry = self;
        let path = path.into();
        match item {
            ModelItemSerialized::Test(item) => {
                scrapcore_serialization::registry::insert::registry_insert::<
                    A,
                    PartialModelRegistry,
                >(registry, path, item)?
            }
            ModelItemSerialized::Test2(item) => {
                scrapcore_serialization::registry::insert::registry_insert::<
                    B,
                    PartialModelRegistry,
                >(registry, path, item)?
            }
            ModelItemSerialized::Test3(item) => {
                scrapcore_serialization::registry::insert::registry_insert::<
                    C1,
                    PartialModelRegistry,
                >(registry, path, item)?
            }
        }
        Ok(())
    }
}
