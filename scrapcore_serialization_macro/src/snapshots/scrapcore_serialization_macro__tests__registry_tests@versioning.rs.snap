---
source: scrapcore_serialization_macro/src/tests.rs
expression: check_registry(path)
input_file: scrapcore_serialization_macro/src/test_cases/registry/versioning.rs
---
#[registry(error = "ModelError")]
pub enum Model {
    #[model(singleton)]
    TestVersioning {
        #[model(version = 4)]
        some_name: B,
        #[model(version_name = "D")]
        v1: D,
        v2: C,
        #[model(version = 3, version_name = "Test2")]
        random: E,
    },
}
#[derive(Debug)]
pub enum ModelItem {
    TestVersioning(B),
}
#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
#[derive(schemars::JsonSchema)]
#[serde(rename = "TestVersioning")]
#[serde(tag = "version")]
pub enum VersionedTestVersioning {
    #[serde(rename = "4")]
    V4(<B as scrapcore_serialization::serialization::SerializationFallback>::Fallback),
    #[serde(rename = "Test2")]
    V3(<E as scrapcore_serialization::serialization::SerializationFallback>::Fallback),
    #[serde(rename = "2")]
    V2(<C as scrapcore_serialization::serialization::SerializationFallback>::Fallback),
    #[serde(rename = "D")]
    V1(<D as scrapcore_serialization::serialization::SerializationFallback>::Fallback),
}
#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
#[derive(schemars::JsonSchema)]
#[serde(tag = "type")]
#[serde(rename = "ModelItem")]
pub enum ModelItemSerialized {
    TestVersioning(VersionedTestVersioning),
}
#[derive(Debug, Copy, Clone, Eq, PartialEq, serde::Serialize, serde::Deserialize)]
#[derive(schemars::JsonSchema)]
pub enum ModelItemKind {
    TestVersioning,
}
#[automatically_derived]
impl std::fmt::Display for ModelItemKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(
            f, "{}", match self { ModelItemKind::TestVersioning =>
            stringify!(TestVersioning), }
        )
    }
}
#[derive(Debug, Copy, Clone, Eq, PartialEq, serde::Serialize, serde::Deserialize)]
#[derive(schemars::JsonSchema)]
pub enum ModelAssetKind {}
#[automatically_derived]
impl std::fmt::Display for ModelAssetKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        unreachable!()
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::kind::ItemKindProvider<B> for ModelRegistry {
    fn kind() -> Self::ItemKind {
        ModelItemKind::TestVersioning
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::kind::ItemKindProvider<B>
for PartialModelRegistry {
    fn kind() -> Self::ItemKind {
        ModelItemKind::TestVersioning
    }
}
#[derive(Debug)]
pub struct ModelRegistry {
    test_versioning: scrapcore_serialization::registry::Singleton<B>,
}
#[derive(Debug, Default)]
pub struct PartialModelRegistry {
    poisoned__: bool,
    test_versioning: scrapcore_serialization::registry::PartialSingleton<
        B,
        VersionedTestVersioning,
    >,
}
#[automatically_derived]
impl scrapcore_serialization::registry::SingletonHolder<B> for ModelRegistry {
    fn get_singleton(&self) -> &scrapcore_serialization::registry::Singleton<B> {
        &self.test_versioning
    }
    fn get_singleton_mut(
        &mut self,
    ) -> &mut scrapcore_serialization::registry::Singleton<B> {
        &mut self.test_versioning
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::PartialSingletonHolder<B>
for PartialModelRegistry {
    type Serialized = VersionedTestVersioning;
    fn get_singleton(
        &mut self,
    ) -> &mut scrapcore_serialization::registry::PartialSingleton<
        B,
        VersionedTestVersioning,
    > {
        &mut self.test_versioning
    }
}
#[automatically_derived]
impl scrapcore_serialization::registry::SerializationRegistry for ModelRegistry {
    type ItemKind = ModelItemKind;
    type AssetKind = ModelAssetKind;
    type Error = ModelError;
}
#[automatically_derived]
impl scrapcore_serialization::registry::SerializationRegistry for PartialModelRegistry {
    type ItemKind = ModelItemKind;
    type AssetKind = ModelAssetKind;
    type Error = ModelError;
}
impl scrapcore_serialization::registry::PartialRegistry for PartialModelRegistry {
    fn poison(&mut self) {
        self.poisoned__ = true;
    }
    fn is_poisoned(&self) -> bool {
        self.poisoned__
    }
}
impl PartialModelRegistry {
    pub fn into_registry(
        self,
    ) -> Result<
        ModelRegistry,
        scrapcore_serialization::serialization::error::DeserializationError<
            PartialModelRegistry,
        >,
    > {
        let mut registry = self;
        scrapcore_serialization::registry::finalize::process_raw_singleton::<
            B,
            PartialModelRegistry,
        >(&mut registry)?;
        let test_versioning = scrapcore_serialization::registry::finalize::convert_partial_singleton::<
            B,
            PartialModelRegistry,
        >(registry.test_versioning)?;
        Ok(ModelRegistry { test_versioning })
    }
}
impl PartialModelRegistry {
    pub fn insert(
        &mut self,
        path: impl Into<
            scrapcore_serialization::registry::path_identifier::PathIdentifier,
        >,
        item: ModelItemSerialized,
    ) -> Result<
        (),
        scrapcore_serialization::serialization::error::DeserializationError<
            PartialModelRegistry,
        >,
    > {
        let registry = self;
        let path = path.into();
        match item {
            ModelItemSerialized::TestVersioning(item) => {
                scrapcore_serialization::registry::insert::singleton_insert::<
                    B,
                    PartialModelRegistry,
                >(registry, path, item)?
            }
        }
        Ok(())
    }
}
