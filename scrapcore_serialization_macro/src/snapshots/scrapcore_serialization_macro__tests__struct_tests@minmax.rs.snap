---
source: scrapcore_serialization_macro/src/tests.rs
expression: check_model(path)
input_file: scrapcore_serialization_macro/src/test_cases/model/struct/minmax.rs
---
#[derive(Debug, DatabaseModel)]
struct Test {
    #[model(min = 5)]
    with_min: u32,
    #[model(max = 15)]
    with_max: u32,
    #[model(min = -5, max = 15)]
    with_min_max: u32,
}
#[derive(Debug, Clone, serde::Serialize, serde::Deserialize)]
#[derive(schemars::JsonSchema)]
#[serde(rename_all = "camelCase")]
pub struct TestSerialized {
    with_min: <u32 as scrapcore_serialization::serialization::SerializationFallback>::Fallback,
    with_max: <u32 as scrapcore_serialization::serialization::SerializationFallback>::Fallback,
    with_min_max: <u32 as scrapcore_serialization::serialization::SerializationFallback>::Fallback,
}
#[automatically_derived]
impl scrapcore_serialization::serialization::SerializationFallback for Test {
    type Fallback = TestSerialized;
}
#[automatically_derived]
impl AsRef<Test> for Test {
    fn as_ref(&self) -> &Test {
        &self
    }
}
#[automatically_derived]
impl<Registry> scrapcore_serialization::serialization::DeserializeModel<Test, Registry>
for TestSerialized
where
    <u32 as scrapcore_serialization::serialization::SerializationFallback>::Fallback: scrapcore_serialization::serialization::DeserializeModel<
        u32,
        Registry,
    >,
    <u32 as scrapcore_serialization::serialization::SerializationFallback>::Fallback: scrapcore_serialization::serialization::DeserializeModel<
        u32,
        Registry,
    >,
    <u32 as scrapcore_serialization::serialization::SerializationFallback>::Fallback: scrapcore_serialization::serialization::DeserializeModel<
        u32,
        Registry,
    >,
    Registry: scrapcore_serialization::registry::PartialRegistry,
{
    fn deserialize(
        self,
        registry: &mut Registry,
    ) -> Result<
        Test,
        scrapcore_serialization::serialization::error::DeserializationError<Registry>,
    > {
        let serialized = self;
        Ok(Test {
            with_min: {
                let item = serialized.with_min;
                scrapcore_serialization::serialization::error::s_try(
                    || {
                        let item: u32 = scrapcore_serialization::serialization::DeserializeModel::<
                            u32,
                            Registry,
                        >::deserialize(item, registry)?;
                        let item: u32 = scrapcore_serialization::serialization::ApplyMin::apply(
                            item,
                            5,
                        )?;
                        Ok(item)
                    },
                    Some(|| scrapcore_serialization::serialization::error::DeserializationErrorStackItem::Field(
                        stringify!(with_min),
                    )),
                )?
            },
            with_max: {
                let item = serialized.with_max;
                scrapcore_serialization::serialization::error::s_try(
                    || {
                        let item: u32 = scrapcore_serialization::serialization::DeserializeModel::<
                            u32,
                            Registry,
                        >::deserialize(item, registry)?;
                        let item: u32 = scrapcore_serialization::serialization::ApplyMax::apply(
                            item,
                            15,
                        )?;
                        Ok(item)
                    },
                    Some(|| scrapcore_serialization::serialization::error::DeserializationErrorStackItem::Field(
                        stringify!(with_max),
                    )),
                )?
            },
            with_min_max: {
                let item = serialized.with_min_max;
                scrapcore_serialization::serialization::error::s_try(
                    || {
                        let item: u32 = scrapcore_serialization::serialization::DeserializeModel::<
                            u32,
                            Registry,
                        >::deserialize(item, registry)?;
                        let item: u32 = scrapcore_serialization::serialization::ApplyMin::apply(
                            item,
                            -5,
                        )?;
                        let item: u32 = scrapcore_serialization::serialization::ApplyMax::apply(
                            item,
                            15,
                        )?;
                        Ok(item)
                    },
                    Some(|| scrapcore_serialization::serialization::error::DeserializationErrorStackItem::Field(
                        stringify!(with_min_max),
                    )),
                )?
            },
        })
    }
}
